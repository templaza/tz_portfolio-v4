<?php
/*------------------------------------------------------------------------

# TZ Portfolio Extension

# ------------------------------------------------------------------------

# Author:    DuongTVTemPlaza

# Copyright: Copyright (C) 2011-2024 TZ Portfolio.com. All Rights Reserved.

# @License - http://www.gnu.org/licenses/gpl-2.0.html GNU/GPL

# Website: http://www.tzportfolio.com

# Technical Support:  Forum - https://www.tzportfolio.com/help/forum.html

# Family website: http://www.templaza.com

# Family Support: Forum - https://www.templaza.com/Forums.html

-------------------------------------------------------------------------*/

namespace TemPlaza\Component\TZ_Portfolio\AddOn\Content\Vote\Extension;

use Joomla\CMS\Factory;
use Joomla\CMS\Language\Text;
use Joomla\CMS\WebAsset\WebAssetManager;
use Joomla\Registry\Registry;
use Psr\Container\ContainerInterface;
use TemPlaza\Component\TZ_Portfolio\AddOn\Content\Vote\Helper\VoteHelper;
use TemPlaza\Component\TZ_Portfolio\Administrator\Library\AddOn\AddOn;
use TemPlaza\Component\TZ_Portfolio\Administrator\Library\Helper\AddonHelper;
use TemPlaza\Component\TZ_Portfolio\Administrator\Library\TZ_PortfolioUri;

defined('_JEXEC') or die;

/**
 * Field Vote Add-On
 */
class Vote extends AddOn
{
    protected $addon;
    protected $cache                = array();
    protected $head                 = array();
    protected $autoloadLanguage     = true;

    public function __construct($subject, array $config = array())
    {
        parent::__construct($subject, $config);

        $this -> head  = array();
        $this -> addon = AddonHelper::getAddOn($this -> _type, $this -> _name);
    }

//    public function boot(ContainerInterface $container)
//    {
////        parent::boot($container); // TODO: Change the autogenerated stub
//
////        die(__FILE__);
////        $wa = Factory::getApplication() -> getDocument() -> getWebAssetManager();
//        $wa = $this ->getApplication() -> getDocument() -> getWebAssetManager();
//        $wa -> registerStyle('com_tz_portfolio.addon.content.vote',TZ_PortfolioUri::root()
//            .'/add-ons/'.$this -> _type.'/'.$this -> _name.'/css/vote.css');
//    }

    public function onAddContentType(){
        $type = new \stdClass();
        $lang = Factory::getLanguage();
        $lang_key = 'PLG_' . $this->_type . '_' . $this->_name . '_TITLE';
        $lang_key = strtoupper($lang_key);

        if ($lang->hasKey($lang_key)) {
            $type->text = Text::_($lang_key);
        } else {
            $type->text = $this->_name;
        }

        $type->value = $this->_name;

        return $type;
    }

    public function onAlwaysLoadDocument($context){
//        /* @var WebAssetManager $wa */
//        $wa = $this ->getApplication() -> getDocument() -> getWebAssetManager();
////        $wa -> useStyle('com_tz_portfolio.addon.content.vote');
//        $wa -> registerStyle('com_tz_portfolio.addon.content.vote',TZ_PortfolioUri::root()
//            .'/add-ons/'.$this -> _type.'/'.$this -> _name.'/css/vote.css');
//        $wa -> registerAndUseStyle('com_tz_portfolio.addon.content.vote',TZ_PortfolioUri::root()
//            .'/add-ons/'.$this -> _type.'/'.$this -> _name.'/css/vote.css');
//        $wa -> registerAndUseScript('com_tz_portfolio.addon.content.vote',TZ_PortfolioUri::root()
//            .'/add-ons/'.$this -> _type.'/'.$this -> _name.'/js/vote.tz_portfolio.js');

//        $document = Factory::getDocument();
//        $document->addStyleSheet(TZ_PortfolioUri::root(true).'/addons/content/vote/css/vote.css', array('version' => 'auto'));
//
//        $document -> addScript(TZ_PortfolioUri::root(true) . '/js/modernizr.custom.js',
//            array('version' => 'v=2.8.3', 'relative' => true));
//        $document -> addScript(TZ_PortfolioUri::root(true) . '/js/classie.min.js',
//            array('version' => 'auto', 'relative' => true));
//        $document -> addScript(TZ_PortfolioUri::root(true) . '/js/notificationfx.min.js',
//            array('version' => 'v=1.0.0', 'relative' => true));
    }

    public function onBeforeDisplayAdditionInfo($context, &$article, $params, $page = 0, $layout = 'default'
        , $module = null){
        list($extension, $vName)   = explode('.', $context);

        $item   = $article;

        if(!isset($this -> head[$vName])){
            $this -> head[$vName]   = false;
        }
        if($module && !isset($this -> head[$vName.$module -> id])){
            $this -> head[$vName.$module -> id]   = false;
        }

        Text::script('PLG_CONTENT_VOTE_VOTES');
        Text::script('PLG_CONTENT_VOTE_VOTES_1');

        if($extension == 'module' || $extension == 'modules'){
            if($path = $this -> getModuleLayout($this -> _type, $this -> _name, $extension, $vName, $layout)){
                if(!$this -> head[$vName]){
                    $document   = Factory::getDocument();
                    $document -> addScriptOptions('com_tz_portfolio.addon.content.vote', [
                        'addonId'   => $this -> addon -> id,
                        'basePath'   => TZ_PortfolioUri::base(true). '/add-ons/content/vote'
                    ]);
                }


                if(isset($article -> id)){
                    $item -> rating_count   = 0;
                    $item -> rating_sum     = 0;

                    if($vote = VoteHelper::getVoteByArticleId($item -> id)) {
                        foreach($vote as $key => $value){
                            $item -> $key   = $value;
                        }
                    }
                }

                // Display html
                ob_start();
                require $path;
                $html = ob_get_contents();
                ob_end_clean();
                $html = trim($html);

                $this -> head[$vName]   = true;
                $this -> head[$vName.($module?$module -> id:'')]   = true;

                return $html;
            }
        }
        elseif(in_array($context, array('com_tz_portfolio.portfolio', 'com_tz_portfolio.date'
        , 'com_tz_portfolio.featured', 'com_tz_portfolio.tags', 'com_tz_portfolio.users'))){
            if($html = $this -> _getViewHtml($context,$item, $params, $layout)){
                if(!$this -> head[$vName]){
                    $document   = Factory::getApplication() -> getDocument();
                    $document -> addScriptOptions('com_tz_portfolio.addon.content.vote', [
                        'addonId'   => $this -> addon -> id,
                        'basePath'   => TZ_PortfolioUri::base(true). '/add-ons/content/vote'
                    ]);
                }
                $this -> head[$vName]   = true;
                return $html;
            }
        }
    }

    public function onContentDisplayArticleView($context, &$article, $params, $page = 0, $layout = null){
        list($extension, $vName)   = explode('.', $context);

        $item   = $article;

        if(isset($article -> id)){
            $item -> rating_count   = 0;
            $item -> rating_sum     = 0;

            if($vote = VoteHelper::getVoteByArticleId($item -> id)) {
                foreach($vote as $key => $value){
                    $item -> $key   = $value;
                }
            }
        }

        if(!isset($this -> head[$vName])){
            $this -> head[$vName]   = false;
        }

        $html   = parent::onContentDisplayArticleView($context, $item, $params, $page, $layout);
        if(!$this -> head[$vName]){
            $document   = Factory::getDocument();
            $document -> addScriptOptions('com_tz_portfolio.addon.content.vote', [
                'addonId'   => $this -> addon -> id,
               'basePath'   => TZ_PortfolioUri::base(true). '/add-ons/content/vote'
            ]);
        }
        $this -> head[$vName]   = true;

        return $html;
    }

    public function onContentAfterDelete($context, $table){
        if($context == 'com_tz_portfolio.article') {
            if($model  = $this -> getModel('Vote','Site')) {
                if(method_exists($model,'delete')) {
                    $model->delete($table);
                }
            }
        }
    }

    public function onAfterDisplayAdditionInfo($context, &$article, $params, $page = 0, $layout = 'default', $module = null){}
    public function onContentDisplayListView($context, &$article, $params, $page = 0, $layout = 'default', $module = null){}
    public function onContentAfterSave($context, $data, $isnew){}
}