<?php
/*------------------------------------------------------------------------

# TZ Portfolio Extension

# ------------------------------------------------------------------------

# Author:    DuongTVTemPlaza

# Copyright: Copyright (C) 2011-2024 TZ Portfolio.com. All Rights Reserved.

# @License - http://www.gnu.org/licenses/gpl-2.0.html GNU/GPL

# Website: http://www.tzportfolio.com

# Technical Support:  Forum - https://www.tzportfolio.com/help/forum.html

# Family website: http://www.templaza.com

# Family Support: Forum - https://www.templaza.com/Forums.html

-------------------------------------------------------------------------*/

namespace TemPlaza\Component\TZ_Portfolio\Site\Service;

use Joomla\CMS\Application\SiteApplication;
use Joomla\CMS\Categories\CategoryFactoryInterface;
use Joomla\CMS\Categories\CategoryInterface;
use Joomla\CMS\Component\ComponentHelper;
use Joomla\CMS\Component\Router\RouterBase;
use Joomla\CMS\Component\Router\RouterView;
use Joomla\CMS\Component\Router\RouterViewConfiguration;
use Joomla\CMS\Component\Router\Rules\MenuRules;
use Joomla\CMS\Component\Router\Rules\NomenuRules;
use Joomla\CMS\Component\Router\Rules\StandardRules;
use Joomla\CMS\Menu\AbstractMenu;
use Joomla\Database\DatabaseInterface;
use Joomla\Database\ParameterType;

defined('_JEXEC') or die;

/**
 * Routing class of com_tz_portfolio
 *
 */
class Router extends RouterView
{
    /**
     * Flag to remove IDs
     *
     * @var    boolean
     */
    protected $noIDs = false;

    /**
     * The category factory
     *
     * @var CategoryFactoryInterface
     *
     * @since  4.0.0
     */
    private $categoryFactory;

    /**
     * The category cache
     *
     * @var  array
     *
     * @since  4.0.0
     */
    private $categoryCache = [];

    /**
     * The db
     *
     * @var DatabaseInterface
     *
     * @since  4.0.0
     */
    private $db;

    /**
     * Content Component router constructor
     *
     * @param   SiteApplication           $app              The application object
     * @param   AbstractMenu              $menu             The menu object to work with
     * @param   CategoryFactoryInterface  $categoryFactory  The category object
     * @param   DatabaseInterface         $db               The database object
     */
    public function __construct(SiteApplication $app, AbstractMenu $menu, CategoryFactoryInterface $categoryFactory,
                                DatabaseInterface $db)
    {
        $this->categoryFactory = $categoryFactory;
        $this->db              = $db;

        $params      = ComponentHelper::getParams('com_tz_portfolio');

        $portfolio = new RouterViewConfiguration('portfolio');
//        $portfolio->setKey('id')->setParent($categories, 'catid')->setNestable()->addLayout('blog');
//        $portfolio -> setKey('id');
        $portfolio -> setKey('id') -> setNestable();
        $this-> registerView($portfolio);

        $article = new RouterViewConfiguration('article');
        $article->setKey('id')->setParent($portfolio, 'catid');
        $this->registerView($article);


//        $this->noIDs = (bool) $params->get('sef_ids');
//        $categories  = new RouterViewConfiguration('categories');
//        $categories->setKey('id');
//        $this->registerView($categories);
//        $category = new RouterViewConfiguration('category');
//        $category->setKey('id')->setParent($categories, 'catid')->setNestable()->addLayout('blog');
//        $this->registerView($category);
//        $article = new RouterViewConfiguration('article');
//        $article->setKey('id')->setParent($category, 'catid');
//        $this->registerView($article);
//        $this->registerView(new RouterViewConfiguration('archive'));
//        $this->registerView(new RouterViewConfiguration('featured'));
//        $form = new RouterViewConfiguration('form');
//        $form->setKey('a_id');
//        $this->registerView($form);

        parent::__construct($app, $menu);

        $this->attachRule(new MenuRules($this));
        $this->attachRule(new StandardRules($this));
        $this->attachRule(new NomenuRules($this));
    }


    /**
     * Method to get the segment(s) for a category
     *
     * @param   string  $id     ID of the category to retrieve the segments for
     * @param   array   $query  The request that is built right now
     *
     * @return  array|string  The segments of this item
     */
    public function getPortfolioSegment($id, $query)
    {
        return $this->getCategorySegment($id, $query);

//        return ;
    }

    /**
     * Method to get the segment(s) for a category
     *
     * @param   string  $id     ID of the category to retrieve the segments for
     * @param   array   $query  The request that is built right now
     *
     * @return  array|string  The segments of this item
     */
    public function getCategorySegment($id, $query)
    {
        $category = $this->getCategories(['access' => true])->get($id);

        if ($category) {
            $path    = array_reverse($category->getPath(), true);
            $path[0] = '1:root';

            if ($this->noIDs) {
                foreach ($path as &$segment) {
                    list($id, $segment) = explode(':', $segment, 2);
                }
            }

            return $path;
        }

        return [];
    }

//    /**
//     * Method to get the segment(s) for a category
//     *
//     * @param   string  $id     ID of the category to retrieve the segments for
//     * @param   array   $query  The request that is built right now
//     *
//     * @return  array|string  The segments of this item
//     */
//    public function getCategoriesSegment($id, $query)
//    {
//        return $this->getCategorySegment($id, $query);
//    }
//
    /**
     * Method to get the segment(s) for an article
     *
     * @param   string  $id     ID of the article to retrieve the segments for
     * @param   array   $query  The request that is built right now
     *
     * @return  array|string  The segments of this item
     */
    public function getArticleSegment($id, $query)
    {
        if (!strpos($id, ':')) {
            $id      = (int) $id;
            $dbquery = $this->db->getQuery(true);
            $dbquery->select($this->db->quoteName('alias'))
                ->from($this->db->quoteName('#__tz_portfolio_plus_content'))
                ->where($this->db->quoteName('id') . ' = :id')
                ->bind(':id', $id, ParameterType::INTEGER);
            $this->db->setQuery($dbquery);

            $id .= ':' . $this->db->loadResult();
        }

        if ($this->noIDs) {
            list($void, $segment) = explode(':', $id, 2);

            return [$void => $segment];
        }

        return ['article' => 'article/'.(int) $id, (int) $id => $id];
        var_dump(['article' => 'article', (int) $id => $id]);
        die(__FILE__);

        return [(int) $id => $id];
    }
//
//    /**
//     * Method to get the segment(s) for a form
//     *
//     * @param   string  $id     ID of the article form to retrieve the segments for
//     * @param   array   $query  The request that is built right now
//     *
//     * @return  array|string  The segments of this item
//     *
//     * @since   3.7.3
//     */
//    public function getFormSegment($id, $query)
//    {
//        return $this->getArticleSegment($id, $query);
//    }
//
//    /**
//     * Method to get the id for a category
//     *
//     * @param   string  $segment  Segment to retrieve the ID for
//     * @param   array   $query    The request that is parsed right now
//     *
//     * @return  mixed   The id of this item or false
//     */
//    public function getCategoryId($segment, $query)
//    {
//        if (isset($query['id'])) {
//            $category = $this->getCategories(['access' => false])->get($query['id']);
//
//            if ($category) {
//                foreach ($category->getChildren() as $child) {
//                    if ($this->noIDs) {
//                        if ($child->alias == $segment) {
//                            return $child->id;
//                        }
//                    } else {
//                        if ($child->id == (int) $segment) {
//                            return $child->id;
//                        }
//                    }
//                }
//            }
//        }
//
//        return false;
//    }
//
//    /**
//     * Method to get the segment(s) for a category
//     *
//     * @param   string  $segment  Segment to retrieve the ID for
//     * @param   array   $query    The request that is parsed right now
//     *
//     * @return  mixed   The id of this item or false
//     */
//    public function getCategoriesId($segment, $query)
//    {
//        return $this->getCategoryId($segment, $query);
//    }
//
    /**
     * Method to get the segment(s) for an article
     *
     * @param   string  $segment  Segment of the article to retrieve the ID for
     * @param   array   $query    The request that is parsed right now
     *
     * @return  mixed   The id of this item or false
     */
    public function getArticleId($segment, $query)
    {
        if ($this->noIDs) {
            $dbquery = $this->db->getQuery(true);
            $dbquery->select($this->db->quoteName('id'))
                ->from($this->db->quoteName('#__tz_portfolio_plus_content'))
                ->where(
                    [
                        $this->db->quoteName('alias') . ' = :alias',
                        $this->db->quoteName('catid') . ' = :catid',
                    ]
                )
                ->bind(':alias', $segment)
                ->bind(':catid', $query['id'], ParameterType::INTEGER);
            $this->db->setQuery($dbquery);

            return (int) $this->db->loadResult();
        }

        return (int) $segment;
    }

    /**
     * Method to get categories from cache
     *
     * @param   array  $options   The options for retrieving categories
     *
     * @return  CategoryInterface  The object containing categories
     *
     * @since   4.0.0
     */
    private function getCategories(array $options = []): CategoryInterface
    {
        $key = serialize($options);

        if (!isset($this->categoryCache[$key])) {
            $this->categoryCache[$key] = $this->categoryFactory->createCategory($options);
        }

        return $this->categoryCache[$key];
    }
}
